#!/usr/bin/env python3

import os, sys, shutil
import re

file_header_text = ''';START_OF_HEADER
;HEADER_VERSION:0.1
;FLAVOR:Griffin
;GENERATOR.NAME:Cura_SteamEngine
;GENERATOR.VERSION:3.6.0
;GENERATOR.BUILD_DATE:{date}
;TARGET_MACHINE.NAME:{machine_name}
;EXTRUDER_TRAIN.0.INITIAL_TEMPERATURE:{initial_temperature}
;EXTRUDER_TRAIN.0.MATERIAL.VOLUME_USED:{volume_used}
;EXTRUDER_TRAIN.0.MATERIAL.GUID:506c9f0d-e3aa-4bd4-b2d2-23e2425b1aa9
;EXTRUDER_TRAIN.0.NOZZLE.DIAMETER:{nozzle_diam}
;EXTRUDER_TRAIN.0.NOZZLE.NAME:AA 0.4
;BUILD_PLATE.TYPE:glass
;BUILD_PLATE.INITIAL_TEMPERATURE:{initial_plate_temperature}
;PRINT.TIME:{print_time}
;PRINT.SIZE.MIN.X:{print_min_x}
;PRINT.SIZE.MIN.Y:{print_min_y}
;PRINT.SIZE.MIN.Z:{print_min_z}
;PRINT.SIZE.MAX.X:{print_max_x}
;PRINT.SIZE.MAX.Y:{print_max_y}
;PRINT.SIZE.MAX.Z:{print_max_z}
;END_OF_HEADER
;Generated with {real_generator_name}
T0
M82 ;absolute extrusion mode

G92 E0
M109 S205
G0 F15000 X9 Y6 Z2
G280
G1 F1500 E-6.5
;LAYER_COUNT:320
;LAYER:0
M107
M204 S625
M205 X6 Y6
;MESH:{file_name}
G0 F3750 X125.327 Y111.545 Z0.27
M204 S500
M205 X5 Y5
;TYPE:WALL-INNER
'''


class GCodeProcessor():
    def __init__(self, filename):
        self.filename = filename
        self.sourcename = os.path.splitext(filename)[0] + '.stl'

    def get_vars_from_slic3r_gcode(self, ):
        with open(self.filename, 'r') as gcode_file:
            functions = [
                self.match_slic3r_header,
                self.match_nozzle_temp,
                self.match_plate_temp,
                self.match_time_estimation,
                self.match_volume_estimation,
            ]
            for line in gcode_file:
                for fn in functions:
                    if fn(line):
                        functions.remove(fn)
                if len(functions) == 0:
                    break

    def match_slic3r_header(self, string):
        match = re.search('; generated by (Slic3r.*) '
            'on ([0-9\-]*) at ([0-9:]*)', string)
        if match:
            self.generator = match.group(1)
            self.date = match.group(2)
            self.hour = match.group(3)
        return match

    def match_nozzle_temp(self, string):
        match = re.search('; first_layer_temperature = ([0-9]*)', string)
        if match:
            self.initial_temperature = match.group(1)
        return match

    def match_plate_temp(self, string):
        match = re.search('; first_layer_bed_temperature = ([0-9]*)', string)
        if match:
            self.initial_plate_temperature = match.group(1)
        return match

    def match_time_estimation(self, string):
        match = re.search('; estimated printing time \(normal mode\) = '
            '(?:([0-9]*)m )?([0-9]*)s', string)
        if match:
            minutes = match.group(1)
            if minutes == None: minutes = '0'
            seconds = match.group(2)
            self.print_time = int(minutes)*60 + int(seconds)
        return match

    def match_volume_estimation(self, string):
        match = re.search('; filament used = '
            '([0-9\.]*)mm \(([0-9\.]*)cm3\)'
            , string)
        if match:
            self.volume_used = int(float(match.group(2))*1000)
        return match

    def file_header(self):
        return file_header_text.format(
            machine_name = 'Ultimaker 3 Extended',
            nozzle_diam = 0.4,
            real_generator_name = self.generator,

            initial_temperature = 205,
            initial_plate_temperature = 60,

            date        = self.date,
            file_name   = 'Default.stl',
            volume_used = self.volume_used,
            print_time  = self.print_time,
            print_min_x = 0,
            print_min_y = 0,
            print_min_z = 0,
            print_max_x = 230,
            print_max_y = 215,
            print_max_z = 215,
        )
    def output(self, out_filename):
        with open(out_filename, 'w') as gcode_outfile:
            gcode_outfile.write(self.file_header())

            with open(self.filename) as gcode_infile:
                for line in gcode_infile:
                        gcode_outfile.write(line)



if __name__ == '__main__':
    filename = sys.argv[1]
    processor = GCodeProcessor(filename)
    processor.get_vars_from_slic3r_gcode()
    processor.output(filename + '_tmp')
    shutil.move(filename + '_tmp', filename)
